
from figures import *


class Board:
    def __init__(self):
        self.board = self.create_board()

    black_king = King(0, (4, 0))
    white_king = King(1, (4, 7))

    # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫—É —Ñ–∏–≥—É—Ä –Ω–∞ –¥–æ—Å–∫–µ
    def create_board(self):
        board = [[None for j in range(8)] for i in range(8)]
        
        # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–µ—à–µ–∫
        board[1] = [Pawn(0, (i, 1)) for i in range(8)]
        board[6] = [Pawn(1, (i, 6)) for i in range(8)]

        # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–∞–¥–µ–π
        board[0][0] = Rook(0, (0, 0)) # –ß–µ—Ä–Ω–∞—è –ª–∞–¥—å—è
        board[0][7] = Rook(0, (7, 0)) # –ß–µ—Ä–Ω–∞—è –ª–∞–¥—å—è
        board[7][0] = Rook(1, (0, 7)) # –ë–µ–ª–∞—è –ª–∞–¥—å—è
        board[7][7] = Rook(1, (7, 7)) # –ë–µ–ª–∞—è –ª–∞–¥—å—è

        # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω–µ–π
        board[0][1] = Knight(0, (1, 0)) # –ß–µ—Ä–Ω—ã–π –∫–æ–Ω—å
        board[0][6] = Knight(0, (6, 0)) # –ß–µ—Ä–Ω—ã–π –∫–æ–Ω—å
        board[7][1] = Knight(1, (1, 7)) # –ë–µ–ª—ã–π –∫–æ–Ω—å
        board[7][6] = Knight(1, (6, 7)) # –ë–µ–ª—ã–π –∫–æ–Ω—å

        # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ª–æ–Ω–æ–≤
        board[0][2] = Bishop(0, (2, 0)) # –ß–µ—Ä–Ω—ã–π —Å–ª–æ–Ω
        board[0][5] = Bishop(0, (5, 0)) # –ß–µ—Ä–Ω—ã–π —Å–ª–æ–Ω
        board[7][2] = Bishop(1, (2, 7)) # –ë–µ–ª—ã–π —Å–ª–æ–Ω
        board[7][5] = Bishop(1, (5, 7)) # –ë–µ–ª—ã–π —Å–ª–æ–Ω

        # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–æ–ª–µ–≤
        board[0][3] = Qween(0, (3, 0)) # –ß–µ—Ä–Ω–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞
        board[7][3] = Qween(1, (3, 7)) # –ë–µ–ª–∞—è –∫–æ—Ä–æ–ª–µ–≤–∞

        # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–æ–ª–µ–π
        board[0][4] = self.black_king # –ß–µ—Ä–Ω—ã–π –∫–æ—Ä–æ–ª—å
        board[7][4] = self.white_king # –ë–µ–ª—ã–π –∫–æ—Ä–æ–ª—å


        # ====
        # board[1][1] = Pawn(1, (4, 1))
        # board[5][3] = Qween(0, (3, 5))
        # # board[6][4] = Bishop(1, (4, 6))
        # # board[6][4] = None
        # board[0][3] = None
        # ====

        return board
        

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–æ—Å–∫—É
    def display_board(self):

        drawn_board = [
            ['  ', 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h '],
            ['8 '] + [None for _ in range(8)] + [' 8'],
            ['7 '] + [None for _ in range(8)] + [' 7'],
            ['6 '] + [None for _ in range(8)] + [' 6'],
            ['5 '] + [None for _ in range(8)] + [' 5'],
            ['4 '] + [None for _ in range(8)] + [' 4'],
            ['3 '] + [None for _ in range(8)] + [' 3'],
            ['2 '] + [None for _ in range(8)] + [' 2'],
            ['1 '] + [None for _ in range(8)] + [' 1'],
            ['  ', 'a ', 'b ', 'c ', 'd ', 'e ', 'f ', 'g ', 'h '],
        ]

        # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ—Å–∫–∏ —Ñ–∏–≥—É—Ä–∞–º–∏ –∏ –ø–æ–ª—è–º–∏
        for i in range(8):
            for j in range(8):
                cur_ceil = self.board[i][j]

                if isinstance(cur_ceil, Figure):
                    drawn_board[1+i][1+j] = cur_ceil.icon + ' '

                elif i % 2 == 0:
                    if j % 2 == 0:
                        drawn_board[1+i][1+j] = '‚¨úÔ∏è'
                    else:
                        drawn_board[1+i][1+j] = '‚¨õÔ∏è'
                else:
                    if j % 2 == 0:
                        drawn_board[1+i][1+j] = '‚¨õÔ∏è'
                    else:
                        drawn_board[1+i][1+j] = '‚¨úÔ∏è'


        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ—Å–∫–∏ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
        print("\n"*15)

        for i in drawn_board:
            print(*i, sep='')
        
        print("\n"*25)
    

    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∏–≥—É—Ä—É
    def move_figure(self, start_pos: tuple, end_pos: tuple, player, game_stage: int) -> bool:
        start_x, start_y = start_pos
        end_x, end_y = end_pos
        figure = self.board[start_y][start_x]
        cur_king = self.white_king if player.color == 1 else self.black_king

        # –í—ã–±—Ä–∞–Ω–∞ –ª–∏ —Ñ–∏–≥—É—Ä–∞
        if figure is None:
            print("–í—ã–±—Ä–∞–Ω–∞ –ø—É—Å—Ç–∞—è –∫–ª–µ—Ç–∫–∞!!!")
            return False
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏ —Ü–≤–µ—Ç
        if figure.color != player.color:
            print("–ú–æ–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Ñ–∏–≥—É—Ä—ã!!!")
            return False
        
        # –ú–æ–∂–Ω–æ –ª–∏ —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥
        if end_pos not in figure.get_valid_moves(self.board, game_stage):
            print("–ù–∞ –¥–∞–Ω–Ω—É—é –∫–ª–µ—Ç–∫—É –Ω–µ–ª—å–∑—è —Å—Ö–æ–¥–∏—Ç—å!!!")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—É–¥–µ—Ç –ª–∏ –∫–æ—Ä–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –∞—Ç–∞–∫–æ–π
        # –°–¥–µ–ª–∞—Ç—å —Ö–æ–¥ -> –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∫–æ—Ä–æ–ª—å –ø–æ–¥ –∞—Ç–∞–∫–æ–π ->¬†–≤–µ—Ä–Ω—É—Ç—å —Ö–æ–¥ –µ—Å–ª–∏ –¥–∞
        target = self.board[end_y][end_x]
        self.board[end_y][end_x] = figure
        figure.position = end_pos
        self.board[start_y][start_x] = None

        if cur_king.is_in_check(self.board, game_stage):
            print("–•–æ–¥ —Å—Ç–∞–≤–∏—Ç –≤–∞—à–µ–≥–æ –∫–æ—Ä–æ–ª—è –ø–æ–¥ —É–¥–∞—Ä!!!")

            self.board[start_y][start_x] = figure
            figure.position = start_pos
            self.board[end_y][end_x] = target

            return False

        # –°–º–µ–Ω–∞ —Ñ–∏–≥—É—Ä—ã, –µ—Å–ª–∏ –ø–µ—à–∫–∞ –¥–æ—à–ª–∞ –¥–æ –∫–æ–Ω—Ü–∞
        if isinstance(figure, Pawn):
            if figure.color == 1:
                if figure.position[1] == 0:
                    self.change_pawn(figure)
            
            else:
                if figure.position[1] == 7:
                    self.change_pawn(figure)

        return True


    # –ú–µ–Ω—è–µ–º –ø–µ—à–∫—É –Ω–∞ –¥—Ä—É–≥—É—é —Ñ–∏–≥—É—Ä—É
    def change_pawn(self, pawn):
        while True:
            print('–ù–∞ –∫–∞–∫—É—é —Ñ–∏–≥—É—Ä—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–µ—à–∫—É?')
            print('- Qween')
            print('- Rook')
            print('- Bishop')
            print('- Knight')
            print('–£–∫–∞–∂–∏—Ç–µ –±—É–∫–≤—É: Q / R / B / K')
            target_figure = input()
            
            pos_x, pos_y = pawn.position
            if target_figure == "Q":
                self.board[pos_y][pos_x] = Qween(pawn.color, pawn.position)
            elif target_figure == "R":
                self.board[pos_y][pos_x] = Rook(pawn.color, pawn.position)
            elif target_figure == "B":
                self.board[pos_y][pos_x] = Bishop(pawn.color, pawn.position)
            elif target_figure == "K":
                self.board[pos_y][pos_x] = Knight(pawn.color, pawn.position)
            else:
                print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–≥—É—Ä—É üò†")


    def is_checkmate(self, color, game_stage: int):
        cur_king = self.white_king if color == 1 else self.black_king
        cur_king.update_valid_moves(self.board, game_stage)
        
        # –ö–æ—Ä–æ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ–¥ –∞—Ç–∞–∫–æ–π
        if not cur_king.is_in_check(self.board, game_stage):
            return False
        
        # –ö–æ—Ä–æ–ª—å –Ω–∏–∫—É–¥–∞ –Ω–µ –º–æ–∂–µ—Ç —Å—Ö–æ–¥–∏—Ç—å
        if len(cur_king.get_valid_moves(self.board, game_stage)) != 0:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ñ–∏–≥—É—Ä—ã –º–æ–≥—É—Ç –∑–∞—â–∏—Ç–∏—Ç—å –∫–æ—Ä–æ–ª—è
        for y in range(8):
            for x in range(8):
                figure = self.board[y][x]
                if figure and figure.color == color:

                    for move in figure.get_valid_moves(self.board, game_stage):
                        move_x, move_y = move
                        start_pos = figure.position
                        target = self.board[move_y][move_x]

                        self.board[move_y][move_x] = figure
                        figure.position = move
                        self.board[y][x] = None

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥
                        if not cur_king.is_in_check(self.board, game_stage):
                            self.board[y][x] = figure
                            figure.position = start_pos
                            self.board[move_y][move_x] = target
                            return False
                        
                        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ–¥
                        self.board[y][x] = figure
                        figure.position = start_pos
                        self.board[move_y][move_x] = target
        
        return True



# TESTING
# Board().display_board()